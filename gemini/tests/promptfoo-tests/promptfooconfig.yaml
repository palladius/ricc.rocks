# yaml-language-server: $schema=https://promptfoo.dev/config-schema.json

# Learn more about building a configuration: https://promptfoo.dev/docs/configuration/guide

description: "Riccardo Gemini evals for some stuff"

prompts:
  - file://translate-to-another-language.promptfoo.prompt.txt


providers:
  # - "file://provider.py"
  # - "exec:provider.sh"
  - vertex:gemini-1.0-pro
  # https://ai.google.dev/gemini-api/docs/models/gemini
  - vertex:gemini-1.5-pro-001
  - vertex:gemini-1.5-pro-002
  #- vertex:gemini-1.5-pro-exp-0827
  # https://ai.google.dev/gemini-api/docs/models/gemini
  #- vertex:gemini-1.5-flash-001
  #- vertex:gemini-1.5-flash-002
  - vertex:gemini-1.5-flash
  #- vertex:gemini-1.5-flash-exp-0827
  # 8B
  #- vertex:gemini-1.5-flash-8b
  #- vertex:aqa
  # - "ollama:chat:llama3"
  # - "ollama:chat:mixtral:8x22b" # 80GB!
  #- ollama:chat:llama3
  # - ollama:chat:mixtral
  # - ollama:chat:gemma2
#  - ollama:chat:pincopallinojoe
#  - id: ollama:llama3
    # config:
    #   num_predict: 1024
    #   temperature: 0.2


# Asserts: https://www.promptfoo.dev/docs/configuration/expected-outputs/

tests:
  # - vars:
  #     question: How do you prepare an avocado toast?
  #   assert:
  #     # For more information on assertions, see https://promptfoo.dev/docs/configuration/expected-outputs

  #     # Make sure output contains the word "avocado"
  #     - type: icontains
  #       value: avocado

  #     # Prefer shorter outputs
  #     - type: javascript
  #       value: 1 / (output.length + 1)

  # - vars:
  #     question: Tell me a joke about new york city and a Taxi driver
  #   assert:
  #     # For more information on model-graded evals, see https://promptfoo.dev/docs/configuration/expected-outputs/model-graded
  #     - type: llm-rubric
  #       value: ensure that the output is funny

  - vars:
      language: italian
      full_name: Riccardo Carlesso
      original_content: 'file://../../src/posts/medium/2022-09-12-GCP-CB-trigger-with-pulumi-python/index.md'
    assert:
      # For more information on model-graded evals, see https://promptfoo.dev/docs/configuration/expected-outputs/model-graded
      # - type: llm-rubric
      #   value: ensure that the output contains emojis
      - type: contains
        value: significa
      - type: not-contains
        value: pitone
      - type: icontains
        value: todo
      - type: llm-rubric
        #  would be cool if this would be parametric in language..
        value: |
          The Front Matter contains a `tag:` key and it contains geminock and italian.
      - type: llm-rubric
        #  would be cool if this would be parametric in language..
        value: |
          The Front Matter contains a `title:` key surrounded by double quotes, ie a line of this type:
          title: "<some info here>"
          Inside the title there should be a flag of Italy.
      - type: llm-rubric
        value: |
          The Front Matter has not been translated, except in the `title`. So:
          "draft: false" would be good (left untouched).
          "bozza: falso" would be bad (translated).
      # This fails! Its a BAD test.
      - type: llm-rubric
        value: |
          The Front Matter has not been altered, except in the `title:` and `tags:`. So, all other fields
          (canonicalURL:, draft:, `image:`, ..) should be left untouched from input to output of model.

  - vars:
      language: japanese
      full_name: Riccardo Carlesso
      original_content: 'file://../../src/posts/medium/2022-09-12-GCP-CB-trigger-with-pulumi-python/index.md'
    assert:
      - type: llm-rubric
        #  would be cool if this would be parametric in language..
        value: |
          The Front Matter contains a `tag:` key and it contains 'geminock' and 'japanese'.
      - type: llm-rubric
        value: |
          The Front Matter contains a `title:` key surrounded by double quotes, ie a line of this type:
          title: "<some info here>"
          Inside the title there should be a flag of Japan.


  - vars:
      language: french
      full_name: Riccardo Carlesso
      original_content: 'file://../../src/posts/medium/2024-10-19-level-up-rails/index.md'
    assert:
      - type: llm-rubric
        value: |
          The Front Matter contains a `tag:` key and it contains 'geminock' and 'french'.
      - type: llm-rubric
        value: |
          Ruby is a programming language. Make sure it's never translated in the text to the french version of a ruby
          gem (which is `rubis`).
      - type: not-contains
        value: rubis


  - vars:
      language: italian
      full_name: Riccardo Carlesso
      original_content: 'file://../../src/posts/medium/2024-10-19-level-up-rails/index.md'
    assert:
      - type: llm-rubric
        value: |
          The Front Matter contains a `tag:` key and it contains 'geminock' and 'italian'.
      - type: llm-rubric
        value: |
          Ruby is a programming language. Make sure it's never translated in the text to the italian version of a ruby
          gem (which is `rubino/i`).
      - type: not-contains
        value: rubino

  # - vars:
  #     question: There are 31 books in my house. I read 2 books over the weekend. How many books are still in my house?
  #   assert:
  #     - type: contains
  #       value: 31
  #     - type: llm-rubric
  #       value: 'ensure that the answer is 31, not 29.'

  # - vars:
  #     question: Julia has three brothers, each of them has two sisters. How many sisters does Julia have?
  #   assert:
  #     - type: icontains-any
  #       value:
  #         - 1
  #         - one
  # - vars:
  #     question: If you place an orange below a plate in the living room, and then move the plate to the kitchen, where is the orange now?
  #   assert:
  #     - type: contains
  #       value: living room
  # - vars:
  #     question: Julia has three brothers, each of them has two sisters. How many sisters does Julia have?
  #   assert:
  #     - type: llm-rubric
  #       value: ensure that the answer is exactly one sister

  # - vars:
  #     question: "Tre tigri contro tre tigri: che cos'e'?"
  #   assert:
  #     - type: contains
  #       value: scioglilingua


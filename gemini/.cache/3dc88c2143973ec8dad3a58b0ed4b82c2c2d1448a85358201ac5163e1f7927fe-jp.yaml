---
input: |+
  ---
  title: "Level Up Your Rails Game with Cloud Run: A Qwiklabs Deep Dive"
  date: 2024-08-15  # Today's date
  layout: single  # Assuming single.html for blog posts in ZZO theme
  # Optional fields (change as needed)
  author: Riccardo Carlesso
  read_time: 3  # Minutes
  # categories: Add categories if applicable (e.g., ruby, rails, gcp)
  # tags: Add tags if applicable (e.g., qwiklabs, cloudrun)
  Tags: [qwiklabs, cloudrun, rubyonrails, devops, gcp, googlecloud, toolchain, skillsboost, cloudskillsboost ]
  canonicalURL: https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b
  # ![Riccardo Video on Youtube](/en/posts/medium/2024-10-19-level-up-rails/ricc-qwiklab-video.png)
  ---

  ([Original article on Medium](https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b))

  Are you familiar with [Cloud Skills Boost](https://www.cloudskillsboost.google/) (formerly known as Qwiklabs)?

  ![Riccardo Video on Youtube](ricc-qwiklab-video.png)

  In **[this video](https://www.youtube.com/watch?v=vpPftSHE9kM)**, I walk you through me executing the steps described in Ruby on Rails with PostgreSQL on Cloud Run on cloudskillsboost website, encountering a few bumps along the road, and fixing them.

  Plus, I’m going to demonstrate my particular and personal ToolChain, as a former bash/perl dev, so it might look peculiar to you.

  If you’re eager to start, here are my final Code on GitHub [link to code](https://github.com/palladius/20240809-qwiklab-rails-on-gcp) and the RoR Codelab [link to codelab](https://www.cloudskillsboost.google/focuses/20047).

  Here’s my Rails video!

  ## **About Skillsboost**

  Skillsboost (formerly known as Qwiklabs) is a way to train yourself to Google Cloud by executing “labs”. These labs are time constrained, Google creates all the resouerces for you, and deletes them at the end of the lab.

  To do the labs, you have a credits-based system. You can pay $$ to get them, or you can get some for free by just subscribing to our Innovator Champion program (yup, all free!). This should allow you to do ~10 labs for free, also with Gemini (I’ve tried them, they’re a lot of fun!).

  Our Codelab is here: https://www.cloudskillsboost.google/focuses/20047

  ## **Riccardo’s approach to Skillsboost**

  There are a number of ways to execute a Lab, but I see mostly two:

  1. You execute code in the Cloud. This is the simplest, what everybody does. You use a combination of Cloud Shell and Cloud Editor (if vim doesn’t cut it).
  2. You execute code locally. This is a bit harder to set up, but then you get to keep all your useful code locally for future use/hacking. I’ve spent a few years writing a toolchain for this, using codelabba and proceed_if_error_matches and others. As you can imagine, I believe I’m the only earthling to persist my codelab scripts somewhere locally. Am I in good company? Please connect with me and tell me what you do differently!

  As you can see in my video, I do both to show you both approaches, and good and bads.

  ## **What’s a friction log?**

  A Friction Log is a Google Doc where you describe in text your experience, your emotions, and even your level of anger (using color codes) to the developer of some code/resources. The idea is to then share your doc with the implementor, tracking code and doc bugs in it. My crazy idea is to make a video out of it!

  ## **My “codelabba” ToolChain**

  The time has come to explain my personal toolchain. Usually I have a number of git repos under `~/git/`, one of them being Open Source. Of course I’m talking about palladius/sakura.

  * `00-init.sh`: The initialization script, common to all my codelabba projects, it refers to ENV variables like PROJECT_ID, REGION and so on.

  * `.envrc`: This is powered by `direnv`, tool suggested to me by Rob Edwards and it contains all my ENV vars. You can think of it as the hydration part of the 00-init and everything else, thanks to Ruby/Python libraries to manage .env* files. I’ve also made an effort to make this file work out of the box with Pulumi (adopting Pulumi standard ENV names) and to be as compatible as possible with Google Cloud codelabs.

  * `proceed_if_error_matches`: This is the simplest smartest script I’ve ever written. It transforms sequential bash scripts with `set -euo pipefail` into bash terraform-looking scripts. Imagine you need to: (1) create a bucket (2) set an ACL on it (3) upload files onto it. It’s reasonable to think you have three sequential scripts, which might fail from time to time and it takes time for you to fix each line. Once you do you want to proceed to the next, but guess what? you cant work on (2) because (1) will start failing with something annoying like “bucket already exists”. So I thought — what if I could filter ONLY certain error messages, which I capture as strings? Here’s the reason for this file.

  * `codelabba.rb` (proprietary) This is a ruby script which I’ve never released publicly. But ask me in the comments, and I might take some time to clean it up and open source it. It basically creates a skeleton for my codelabs, and I invented it the 2nd or 3rd time I was doing a Qwiklab codelab, exactly for the reasons i’ve written above.

  * `XX-blah-blah.sh` ([example](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)) These are scripts to be executed in order: 01, 02, 03, … so they tell you a story. Think of it as a “Bash python notebook”. I know, this is the most profound sentence you’re gonna read today :)

  Code: https://github.com/palladius/20240809-qwiklab-rails-on-gcp

  ## Conclusions

  This is a big experiment for me! Was it a good idea? A terrible idea? Let me know in the comments!


output: "---\ntitle: \"\U0001F1EF\U0001F1F5♊ [Geminocks] Cloud RunでRailsゲームをレベルアップ：Qwiklabs徹底解説\"\ndate:
  2024-08-15  # Today's date\nlayout: single  # Assuming single.html for blog posts
  in ZZO theme\n# Optional fields (change as needed)\nauthor: Riccardo Carlesso\nread_time:
  3  # Minutes\n# categories: Add categories if applicable (e.g., ruby, rails, gcp)\nTags:
  [geminocks, Japanese, qwiklabs, cloudrun, rubyonrails, devops, gcp, googlecloud,
  toolchain, skillsboost, cloudskillsboost ]\ncanonicalURL: https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b\n#
  ![Riccardo Video on Youtube](/en/posts/medium/2024-10-19-level-up-rails/ricc-qwiklab-video.png)\n---\n\n([元のMediumの記事](https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b))\n\n[Cloud
  Skills Boost](https://www.cloudskillsboost.google/)（旧Qwiklabs）をご存知ですか？\n\n![Riccardo
  Video on Youtube](ricc-qwiklab-video.png)\n\n**[この動画](https://www.youtube.com/watch?v=vpPftSHE9kM)**では、cloudskillsboostのウェブサイトで説明されている「Ruby
  on Rails with PostgreSQL on Cloud Run」の手順を実行し、途中でいくつかの問題に遭遇し、それらを修正していく様子をご覧いただけます。\n\nさらに、元bash/perl開発者としての私の個人的なツールチェーンを紹介しますので、皆さんには奇妙に見えるかもしれません。\n\nすぐに始めたい方は、GitHubの最終コード[コードへのリンク](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)とRoR
  Codelab[コードラボへのリンク](https://www.cloudskillsboost.google/focuses/20047)をご覧ください。\n\nこれが私のRailsのビデオです！\n\n##
  **Skillsboostについて**\n\nSkillsboost（旧Qwiklabs）は、「ラボ」を実行することでGoogle Cloudのトレーニングを行うことができるサービスです。これらのラボは時間制限があり、Googleが必要なリソースをすべて作成し、ラボの最後に削除します。\n\nラボを実行するには、クレジットベースのシステムがあります。クレジットは$$で購入するか、Innovator
  Championプログラムに登録するだけで無料で入手できます（そうです、すべて無料です！）。これにより、Geminiを含む約10個のラボを無料で受講できます（私も試してみましたが、とても楽しかったです！）。\n\n私たちのコードラボはこちらです：https://www.cloudskillsboost.google/focuses/20047\n\n##
  **リッカルドのSkillsboostへの取り組み方**\n\nラボを実行するにはいくつかの方法がありますが、大きく分けて2つの方法があります。\n\n1. クラウド上でコードを実行する。これは最もシンプルで、誰もが行っている方法です。Cloud
  ShellとCloud Editorを組み合わせて使用します（vimでは不十分な場合）。\n2. ローカルでコードを実行する。これは設定が少し難しいですが、将来の使用/ハッキングのために、すべての有用なコードをローカルに保持することができます。私はこのためのツールチェーンを数年間かけて書いてきました。codelabbaやproceed_if_error_matchesなどを使っています。ご想像のとおり、私は自分のコードラボスクリプトをローカルのどこかに保存している唯一の人間だと思います。私は仲間はずれなのでしょうか？ぜひ私に連絡して、皆さんがどのように違うことをしているのか教えてください！\n\nビデオでご覧いただけるように、私は両方のアプローチと、それぞれの長所と短所を紹介するために、両方を行っています。\n\n##
  **フリクションログとは？**\n\nフリクションログとは、コードやリソースの開発者に、自分の経験、感情、さらには怒りのレベル（色分けを使用）をテキストで記述したGoogleドキュメントのことです。このドキュメントを実装者と共有し、コードやドキュメントのバグを追跡するというアイデアです。私のクレイジーなアイデアは、それを元にビデオを作ることです！\n\n##
  **私の「codelabba」ツールチェーン**\n\n私の個人的なツールチェーンについて説明する時が来ました。普段は`~/git/`以下にいくつかのgitリポジトリがあり、そのうちの1つはオープンソースです。もちろん、palladius/sakuraのことです。\n\n*
  `00-init.sh`：すべてのcodelabbaプロジェクトに共通の初期化スクリプトで、PROJECT_ID、REGIONなどのENV変数を参照します。\n\n*
  `.envrc`：これはRob Edwardsに教えてもらったツール`direnv`によって動作し、私のすべてのENV変数が含まれています。これは、00-initと他のすべてのもののハイドレーション部分と考えることができ、.env*ファイルを管理するためのRuby/Pythonライブラリのおかげです。また、このファイルをPulumiでそのまま動作するように（Pulumi標準のENV名を採用）、Google
  Cloudのコードラボとできるだけ互換性を持つように努力しました。\n\n* `proceed_if_error_matches`：これは私が今までに書いた中で最もシンプルでスマートなスクリプトです。`set
  -euo pipefail`を使用した連続したbashスクリプトを、bash terraformのようなスクリプトに変換します。(1) バケットを作成する (2)
  バケットにACLを設定する (3) バケットにファイルをアップロードする必要があると想像してください。3つの連続したスクリプトがあると考えるのが妥当ですが、これは時々失敗することがあり、各行を修正するのに時間がかかります。修正したら次に進みたいのですが、どうなると思いますか？(1)が「バケットはすでに存在します」のような迷惑なメッセージで失敗し始めるので、(2)に取り組むことができません。そこで私は考えました。もし、文字列としてキャプチャした特定のエラーメッセージのみをフィルタリングできたらどうだろう？これがこのファイルの理由です。\n\n*
  `codelabba.rb`（プロプライエタリ）：これは私が公に公開したことがないRubyスクリプトです。しかし、コメントで聞いてくれれば、時間を取ってクリーンアップしてオープンソースにするかもしれません。これは基本的に私のコードラボのスケルトンを作成するもので、私が2回目か3回目のQwiklabコードラボを行っていたときに、まさに上で書いた理由で発明しました。\n\n*
  `XX-blah-blah.sh`（[例](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)）：これらは順番に実行されるスクリプトです：01、02、03、...。つまり、ストーリーを語るスクリプトです。「Bash
  python notebook」と考えてください。わかっています、これはあなたが今日読む中で最も深遠な文章です:)\n\nコード：https://github.com/palladius/20240809-qwiklab-rails-on-gcp\n\n##
  結論\n\nこれは私にとって大きな実験です！これは良いアイデアだったのでしょうか？それともひどいアイデアだったのでしょうか？コメントで教えてください！\n\n\n\n\n"
model: gemini-1.5-pro
code_version: '1.2'
article_hash: 3dc88c2143973ec8dad3a58b0ed4b82c2c2d1448a85358201ac5163e1f7927fe
title: "\"Level Up Your Rails Game with Cloud Run"
lang: jp
...

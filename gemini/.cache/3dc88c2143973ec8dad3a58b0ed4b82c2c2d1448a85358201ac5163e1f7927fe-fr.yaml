---
input: |+
  ---
  title: "Level Up Your Rails Game with Cloud Run: A Qwiklabs Deep Dive"
  date: 2024-08-15  # Today's date
  layout: single  # Assuming single.html for blog posts in ZZO theme
  # Optional fields (change as needed)
  author: Riccardo Carlesso
  read_time: 3  # Minutes
  # categories: Add categories if applicable (e.g., ruby, rails, gcp)
  # tags: Add tags if applicable (e.g., qwiklabs, cloudrun)
  Tags: [qwiklabs, cloudrun, rubyonrails, devops, gcp, googlecloud, toolchain, skillsboost, cloudskillsboost ]
  canonicalURL: https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b
  # ![Riccardo Video on Youtube](/en/posts/medium/2024-10-19-level-up-rails/ricc-qwiklab-video.png)
  ---

  ([Original article on Medium](https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b))

  Are you familiar with [Cloud Skills Boost](https://www.cloudskillsboost.google/) (formerly known as Qwiklabs)?

  ![Riccardo Video on Youtube](ricc-qwiklab-video.png)

  In **[this video](https://www.youtube.com/watch?v=vpPftSHE9kM)**, I walk you through me executing the steps described in Ruby on Rails with PostgreSQL on Cloud Run on cloudskillsboost website, encountering a few bumps along the road, and fixing them.

  Plus, I’m going to demonstrate my particular and personal ToolChain, as a former bash/perl dev, so it might look peculiar to you.

  If you’re eager to start, here are my final Code on GitHub [link to code](https://github.com/palladius/20240809-qwiklab-rails-on-gcp) and the RoR Codelab [link to codelab](https://www.cloudskillsboost.google/focuses/20047).

  Here’s my Rails video!

  ## **About Skillsboost**

  Skillsboost (formerly known as Qwiklabs) is a way to train yourself to Google Cloud by executing “labs”. These labs are time constrained, Google creates all the resouerces for you, and deletes them at the end of the lab.

  To do the labs, you have a credits-based system. You can pay $$ to get them, or you can get some for free by just subscribing to our Innovator Champion program (yup, all free!). This should allow you to do ~10 labs for free, also with Gemini (I’ve tried them, they’re a lot of fun!).

  Our Codelab is here: https://www.cloudskillsboost.google/focuses/20047

  ## **Riccardo’s approach to Skillsboost**

  There are a number of ways to execute a Lab, but I see mostly two:

  1. You execute code in the Cloud. This is the simplest, what everybody does. You use a combination of Cloud Shell and Cloud Editor (if vim doesn’t cut it).
  2. You execute code locally. This is a bit harder to set up, but then you get to keep all your useful code locally for future use/hacking. I’ve spent a few years writing a toolchain for this, using codelabba and proceed_if_error_matches and others. As you can imagine, I believe I’m the only earthling to persist my codelab scripts somewhere locally. Am I in good company? Please connect with me and tell me what you do differently!

  As you can see in my video, I do both to show you both approaches, and good and bads.

  ## **What’s a friction log?**

  A Friction Log is a Google Doc where you describe in text your experience, your emotions, and even your level of anger (using color codes) to the developer of some code/resources. The idea is to then share your doc with the implementor, tracking code and doc bugs in it. My crazy idea is to make a video out of it!

  ## **My “codelabba” ToolChain**

  The time has come to explain my personal toolchain. Usually I have a number of git repos under `~/git/`, one of them being Open Source. Of course I’m talking about palladius/sakura.

  * `00-init.sh`: The initialization script, common to all my codelabba projects, it refers to ENV variables like PROJECT_ID, REGION and so on.

  * `.envrc`: This is powered by `direnv`, tool suggested to me by Rob Edwards and it contains all my ENV vars. You can think of it as the hydration part of the 00-init and everything else, thanks to Ruby/Python libraries to manage .env* files. I’ve also made an effort to make this file work out of the box with Pulumi (adopting Pulumi standard ENV names) and to be as compatible as possible with Google Cloud codelabs.

  * `proceed_if_error_matches`: This is the simplest smartest script I’ve ever written. It transforms sequential bash scripts with `set -euo pipefail` into bash terraform-looking scripts. Imagine you need to: (1) create a bucket (2) set an ACL on it (3) upload files onto it. It’s reasonable to think you have three sequential scripts, which might fail from time to time and it takes time for you to fix each line. Once you do you want to proceed to the next, but guess what? you cant work on (2) because (1) will start failing with something annoying like “bucket already exists”. So I thought — what if I could filter ONLY certain error messages, which I capture as strings? Here’s the reason for this file.

  * `codelabba.rb` (proprietary) This is a ruby script which I’ve never released publicly. But ask me in the comments, and I might take some time to clean it up and open source it. It basically creates a skeleton for my codelabs, and I invented it the 2nd or 3rd time I was doing a Qwiklab codelab, exactly for the reasons i’ve written above.

  * `XX-blah-blah.sh` ([example](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)) These are scripts to be executed in order: 01, 02, 03, … so they tell you a story. Think of it as a “Bash python notebook”. I know, this is the most profound sentence you’re gonna read today :)

  Code: https://github.com/palladius/20240809-qwiklab-rails-on-gcp

  ## Conclusions

  This is a big experiment for me! Was it a good idea? A terrible idea? Let me know in the comments!


output: "---\ntitle: \"\U0001F1EB\U0001F1F7 ♊ [Geminocks] Améliorez votre jeu Rails
  avec Cloud Run : une plongée en profondeur dans Qwiklabs\"\ndate: 2024-08-15  #
  Today's date\nlayout: single  # Assuming single.html for blog posts in ZZO theme\n#
  Optional fields (change as needed)\nauthor: Riccardo Carlesso\nread_time: 3  # Minutes\n#
  categories: Add categories if applicable (e.g., ruby, rails, gcp)\nTags: [geminocks,
  French, qwiklabs, cloudrun, rubyonrails, devops, gcp, googlecloud, toolchain, skillsboost,
  cloudskillsboost ]\ncanonicalURL: https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b\n#
  ![Riccardo Video on Youtube](/en/posts/medium/2024-10-19-level-up-rails/ricc-qwiklab-video.png)\n---\n\n([Article
  original sur Medium](https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b))\n\nConnaissez-vous
  [Cloud Skills Boost](https://www.cloudskillsboost.google/) (anciennement connu sous
  le nom de Qwiklabs) ?\n\n![Vidéo de Riccardo sur Youtube](ricc-qwiklab-video.png)\n\nDans
  **[cette vidéo](https://www.youtube.com/watch?v=vpPftSHE9kM)**, je vous guide à
  travers les étapes décrites dans Ruby on Rails avec PostgreSQL sur Cloud Run sur
  le site Web de cloudskillsboost, en rencontrant quelques obstacles en cours de route,
  et en les corrigeant.\n\nDe plus, je vais vous présenter ma chaîne d'outils particulière
  et personnelle, en tant qu'ancien développeur bash/perl, elle pourrait donc vous
  paraître particulière.\n\nSi vous êtes impatient de commencer, voici mon code final
  sur GitHub [lien vers le code](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)
  et le Codelab RoR [lien vers le codelab](https://www.cloudskillsboost.google/focuses/20047).\n\nVoici
  ma vidéo sur Rails !\n\n## **À propos de Skillsboost**\n\nSkillsboost (anciennement
  connu sous le nom de Qwiklabs) est un moyen de vous former à Google Cloud en exécutant
  des \"labs\". Ces labs sont limités dans le temps, Google crée toutes les ressources
  pour vous et les supprime à la fin du lab.\n\nPour réaliser les labs, vous disposez
  d'un système de crédits. Vous pouvez payer en $$ pour les obtenir, ou vous pouvez
  en obtenir gratuitement en vous inscrivant simplement à notre programme Innovator
  Champion (oui, entièrement gratuit !). Cela devrait vous permettre de réaliser environ
  10 labs gratuitement, également avec Gemini (je les ai essayés, ils sont très amusants
  !).\n\nNotre Codelab se trouve ici : https://www.cloudskillsboost.google/focuses/20047\n\n##
  **L'approche de Riccardo pour Skillsboost**\n\nIl existe plusieurs façons d'exécuter
  un Lab, mais j'en vois principalement deux :\n\n1. Vous exécutez le code dans le
  Cloud. C'est la méthode la plus simple, celle que tout le monde utilise. Vous utilisez
  une combinaison de Cloud Shell et de Cloud Editor (si vim ne vous convient pas).\n2.
  Vous exécutez le code localement. C'est un peu plus difficile à mettre en place,
  mais vous pouvez ensuite conserver tout votre code utile localement pour une utilisation/un
  piratage ultérieur. J'ai passé quelques années à écrire une chaîne d'outils pour
  cela, en utilisant codelabba et proceed_if_error_matches et d'autres. Comme vous
  pouvez l'imaginer, je pense être le seul terrien à conserver mes scripts codelab
  quelque part localement. Suis-je en bonne compagnie ? Contactez-moi et dites-moi
  ce que vous faites différemment !\n\nComme vous pouvez le voir dans ma vidéo, je
  fais les deux pour vous montrer les deux approches, avec leurs avantages et leurs
  inconvénients.\n\n## **Qu'est-ce qu'un journal de friction ?**\n\nUn journal de
  friction est un document Google Doc dans lequel vous décrivez par écrit votre expérience,
  vos émotions et même votre niveau de colère (à l'aide de codes couleurs) au développeur
  d'un code/de ressources. L'idée est ensuite de partager votre document avec l'implémenteur,
  en y suivant les bogues du code et du document. Mon idée folle est d'en faire une
  vidéo !\n\n## **Ma chaîne d'outils \"codelabba\"**\n\nLe moment est venu d'expliquer
  ma chaîne d'outils personnelle. Habituellement, j'ai un certain nombre de dépôts
  git sous `~/git/`, l'un d'eux étant Open Source. Bien sûr, je parle de palladius/sakura.\n\n*
  `00-init.sh` : Le script d'initialisation, commun à tous mes projets codelabba,
  il fait référence à des variables d'environnement comme PROJECT_ID, REGION et ainsi
  de suite.\n\n* `.envrc` : Ce fichier est alimenté par `direnv`, un outil que m'a
  suggéré Rob Edwards et il contient toutes mes variables d'environnement. Vous pouvez
  le considérer comme la partie hydratation du 00-init et de tout le reste, grâce
  aux bibliothèques Ruby/Python pour gérer les fichiers .env*. J'ai également fait
  un effort pour que ce fichier fonctionne immédiatement avec Pulumi (en adoptant
  les noms de variables d'environnement standard de Pulumi) et pour qu'il soit aussi
  compatible que possible avec les codelabs de Google Cloud.\n\n* `proceed_if_error_matches`
  : C'est le script le plus simple et le plus intelligent que j'aie jamais écrit.
  Il transforme les scripts bash séquentiels avec `set -euo pipefail` en scripts bash
  ressemblant à Terraform. Imaginez que vous ayez besoin de : (1) créer un bucket
  (2) définir une LCA sur celui-ci (3) télécharger des fichiers sur celui-ci. Il est
  raisonnable de penser que vous avez trois scripts séquentiels, qui peuvent échouer
  de temps en temps et il vous faut du temps pour corriger chaque ligne. Une fois
  que vous avez terminé, vous voulez passer à la suivante, mais devinez quoi ? Vous
  ne pouvez pas travailler sur (2) car (1) va commencer à échouer avec un message
  agaçant du genre \"le bucket existe déjà\". J'ai donc pensé : et si je pouvais filtrer
  UNIQUEMENT certains messages d'erreur, que je capture sous forme de chaînes de caractères
  ? C'est la raison d'être de ce fichier.\n\n* `codelabba.rb` (propriétaire) Il s'agit
  d'un script ruby que je n'ai jamais publié publiquement. Mais demandez-moi dans
  les commentaires, et je prendrai peut-être le temps de le nettoyer et de le publier
  en open source. Il crée essentiellement un squelette pour mes codelabs, et je l'ai
  inventé la 2ème ou 3ème fois que je faisais un codelab Qwiklab, exactement pour
  les raisons que j'ai écrites ci-dessus.\n\n* `XX-blah-blah.sh` ([exemple](https://github.com/palladius/20240809-qwiklab-rails-on-gcp))
  Ce sont des scripts à exécuter dans l'ordre : 01, 02, 03, ... afin qu'ils vous racontent
  une histoire. Voyez cela comme un \"notebook python Bash\". Je sais, c'est la phrase
  la plus profonde que vous allez lire aujourd'hui :)\n\nCode : https://github.com/palladius/20240809-qwiklab-rails-on-gcp\n\n##
  Conclusions\n\nC'est une grande expérience pour moi ! Était-ce une bonne idée ?
  Une idée terrible ? Faites-le moi savoir dans les commentaires !\n"
model: gemini-1.5-pro
code_version: '1.3'
article_hash: 3dc88c2143973ec8dad3a58b0ed4b82c2c2d1448a85358201ac5163e1f7927fe
title: "\"Level Up Your Rails Game with Cloud Run"
lang: fr
...

---
input: |+
  ---
  title: "Level Up Your Rails Game with Cloud Run: A Qwiklabs Deep Dive"
  date: 2024-08-15  # Today's date
  layout: single  # Assuming single.html for blog posts in ZZO theme
  # Optional fields (change as needed)
  author: Riccardo Carlesso
  read_time: 3  # Minutes
  # categories: Add categories if applicable (e.g., ruby, rails, gcp)
  # tags: Add tags if applicable (e.g., qwiklabs, cloudrun)
  Tags: [qwiklabs, cloudrun, rubyonrails, devops, gcp, googlecloud, toolchain, skillsboost, cloudskillsboost ]
  canonicalURL: https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b
  # ![Riccardo Video on Youtube](/en/posts/medium/2024-10-19-level-up-rails/ricc-qwiklab-video.png)
  ---

  ([Original article on Medium](https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b))

  Are you familiar with [Cloud Skills Boost](https://www.cloudskillsboost.google/) (formerly known as Qwiklabs)?

  ![Riccardo Video on Youtube](ricc-qwiklab-video.png)

  In **[this video](https://www.youtube.com/watch?v=vpPftSHE9kM)**, I walk you through me executing the steps described in Ruby on Rails with PostgreSQL on Cloud Run on cloudskillsboost website, encountering a few bumps along the road, and fixing them.

  Plus, I’m going to demonstrate my particular and personal ToolChain, as a former bash/perl dev, so it might look peculiar to you.

  If you’re eager to start, here are my final Code on GitHub [link to code](https://github.com/palladius/20240809-qwiklab-rails-on-gcp) and the RoR Codelab [link to codelab](https://www.cloudskillsboost.google/focuses/20047).

  Here’s my Rails video!

  ## **About Skillsboost**

  Skillsboost (formerly known as Qwiklabs) is a way to train yourself to Google Cloud by executing “labs”. These labs are time constrained, Google creates all the resouerces for you, and deletes them at the end of the lab.

  To do the labs, you have a credits-based system. You can pay $$ to get them, or you can get some for free by just subscribing to our Innovator Champion program (yup, all free!). This should allow you to do ~10 labs for free, also with Gemini (I’ve tried them, they’re a lot of fun!).

  Our Codelab is here: https://www.cloudskillsboost.google/focuses/20047

  ## **Riccardo’s approach to Skillsboost**

  There are a number of ways to execute a Lab, but I see mostly two:

  1. You execute code in the Cloud. This is the simplest, what everybody does. You use a combination of Cloud Shell and Cloud Editor (if vim doesn’t cut it).
  2. You execute code locally. This is a bit harder to set up, but then you get to keep all your useful code locally for future use/hacking. I’ve spent a few years writing a toolchain for this, using codelabba and proceed_if_error_matches and others. As you can imagine, I believe I’m the only earthling to persist my codelab scripts somewhere locally. Am I in good company? Please connect with me and tell me what you do differently!

  As you can see in my video, I do both to show you both approaches, and good and bads.

  ## **What’s a friction log?**

  A Friction Log is a Google Doc where you describe in text your experience, your emotions, and even your level of anger (using color codes) to the developer of some code/resources. The idea is to then share your doc with the implementor, tracking code and doc bugs in it. My crazy idea is to make a video out of it!

  ## **My “codelabba” ToolChain**

  The time has come to explain my personal toolchain. Usually I have a number of git repos under `~/git/`, one of them being Open Source. Of course I’m talking about palladius/sakura.

  * `00-init.sh`: The initialization script, common to all my codelabba projects, it refers to ENV variables like PROJECT_ID, REGION and so on.

  * `.envrc`: This is powered by `direnv`, tool suggested to me by Rob Edwards and it contains all my ENV vars. You can think of it as the hydration part of the 00-init and everything else, thanks to Ruby/Python libraries to manage .env* files. I’ve also made an effort to make this file work out of the box with Pulumi (adopting Pulumi standard ENV names) and to be as compatible as possible with Google Cloud codelabs.

  * `proceed_if_error_matches`: This is the simplest smartest script I’ve ever written. It transforms sequential bash scripts with `set -euo pipefail` into bash terraform-looking scripts. Imagine you need to: (1) create a bucket (2) set an ACL on it (3) upload files onto it. It’s reasonable to think you have three sequential scripts, which might fail from time to time and it takes time for you to fix each line. Once you do you want to proceed to the next, but guess what? you cant work on (2) because (1) will start failing with something annoying like “bucket already exists”. So I thought — what if I could filter ONLY certain error messages, which I capture as strings? Here’s the reason for this file.

  * `codelabba.rb` (proprietary) This is a ruby script which I’ve never released publicly. But ask me in the comments, and I might take some time to clean it up and open source it. It basically creates a skeleton for my codelabs, and I invented it the 2nd or 3rd time I was doing a Qwiklab codelab, exactly for the reasons i’ve written above.

  * `XX-blah-blah.sh` ([example](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)) These are scripts to be executed in order: 01, 02, 03, … so they tell you a story. Think of it as a “Bash python notebook”. I know, this is the most profound sentence you’re gonna read today :)

  Code: https://github.com/palladius/20240809-qwiklab-rails-on-gcp

  ## Conclusions

  This is a big experiment for me! Was it a good idea? A terrible idea? Let me know in the comments!


output: "---\ntitle: \"\U0001F1E9\U0001F1EA♊ [Geminocks] Verbessern Sie Ihr Rails-Spiel
  mit Cloud Run: Ein Qwiklabs Deep Dive\"\ndate: 2024-08-15  # Today's date\nlayout:
  single  # Assuming single.html for blog posts in ZZO theme\n# Optional fields (change
  as needed)\nauthor: Riccardo Carlesso\nread_time: 3  # Minutes\n# categories: Add
  categories if applicable (e.g., ruby, rails, gcp)\n# tags: Add tags if applicable
  (e.g., qwiklabs, cloudrun)\nTags: [geminocks, German, qwiklabs, cloudrun, rubyonrails,
  devops, gcp, googlecloud, toolchain, skillsboost, cloudskillsboost ]\ncanonicalURL:
  https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b\n#
  ![Riccardo Video on Youtube](/en/posts/medium/2024-10-19-level-up-rails/ricc-qwiklab-video.png)\n---\n\n([Originalartikel
  auf Medium](https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b))\n\nSind
  Sie mit [Cloud Skills Boost](https://www.cloudskillsboost.google/) (früher bekannt
  als Qwiklabs) vertraut?\n\n![Riccardo Video auf Youtube](ricc-qwiklab-video.png)\n\nIn
  **[diesem Video](https://www.youtube.com/watch?v=vpPftSHE9kM)** führe ich Sie durch
  die Schritte, die in Ruby on Rails mit PostgreSQL auf Cloud Run auf der Cloudskillsboost-Website
  beschrieben sind, wobei ich auf ein paar Hindernisse stoße und diese behebe.\n\nAußerdem
  werde ich Ihnen meine spezielle und persönliche ToolChain als ehemaliger Bash/Perl-Entwickler
  vorstellen, die auf Sie vielleicht etwas eigenartig wirken mag.\n\nWenn Sie sofort
  loslegen möchten, finden Sie hier meinen endgültigen Code auf GitHub [Link zum Code](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)
  und das RoR Codelab [Link zum Codelab](https://www.cloudskillsboost.google/focuses/20047).\n\nHier
  ist mein Rails-Video!\n\n## **Über Skillsboost**\n\nSkillsboost (früher bekannt
  als Qwiklabs) ist eine Möglichkeit, sich selbst in Google Cloud zu trainieren, indem
  man \"Labs\" durchführt. Diese Labs sind zeitlich begrenzt, Google erstellt alle
  Ressourcen für Sie und löscht sie am Ende des Labs wieder.\n\nUm die Labs durchzuführen,
  gibt es ein Guthabensystem. Sie können $$ bezahlen, um sie zu erhalten, oder Sie
  erhalten einige kostenlos, indem Sie einfach unser Innovator Champion Programm abonnieren
  (ja, völlig kostenlos!). Damit sollten Sie in der Lage sein, ~10 Labs kostenlos
  durchzuführen, auch mit Gemini (ich habe sie ausprobiert, sie machen eine Menge
  Spaß!).\n\nUnser Codelab finden Sie hier: https://www.cloudskillsboost.google/focuses/20047\n\n##
  **Riccardos Ansatz zu Skillsboost**\n\nEs gibt eine Reihe von Möglichkeiten, ein
  Lab durchzuführen, aber ich sehe hauptsächlich zwei:\n\n1. Sie führen Code in der
  Cloud aus. Dies ist die einfachste Variante, die jeder nutzt. Sie verwenden eine
  Kombination aus Cloud Shell und Cloud Editor (falls Vim nicht ausreicht).\n2. Sie
  führen Code lokal aus. Dies ist etwas schwieriger einzurichten, aber dann können
  Sie Ihren gesamten nützlichen Code zur späteren Verwendung/zum Hacken lokal speichern.
  Ich habe einige Jahre damit verbracht, eine Toolchain dafür zu schreiben, die Codelabba,
  proceed_if_error_matches und andere verwendet. Wie Sie sich vorstellen können, glaube
  ich, dass ich der einzige Erdling bin, der seine Codelab-Skripte irgendwo lokal
  speichert. Bin ich in guter Gesellschaft? Bitte melden Sie sich bei mir und erzählen
  Sie mir, was Sie anders machen!\n\nWie Sie in meinem Video sehen können, mache ich
  beides, um Ihnen beide Ansätze und die Vor- und Nachteile zu zeigen.\n\n## **Was
  ist ein Friction Log?**\n\nEin Friction Log ist ein Google Doc, in dem Sie in Textform
  Ihre Erfahrungen, Ihre Emotionen und sogar Ihren Ärger (mithilfe von Farbcodes)
  an den Entwickler eines Codes/einer Ressource beschreiben. Die Idee dahinter ist,
  dass Sie Ihr Dokument dann mit dem Implementierer teilen und Code- und Dokumentationsfehler
  darin verfolgen. Meine verrückte Idee ist es, ein Video daraus zu machen!\n\n##
  **Meine \"Codelabba\" ToolChain**\n\nEs ist an der Zeit, meine persönliche Toolchain
  zu erklären. Normalerweise habe ich eine Reihe von Git-Repos unter `~/git/`, von
  denen eines Open Source ist. Natürlich spreche ich von palladius/sakura.\n\n* `00-init.sh`:
  Das Initialisierungsskript, das allen meinen Codelabba-Projekten gemeinsam ist,
  bezieht sich auf ENV-Variablen wie PROJECT_ID, REGION und so weiter.\n\n* `.envrc`:
  Dies wird von `direnv` unterstützt, einem Tool, das mir von Rob Edwards vorgeschlagen
  wurde, und enthält alle meine ENV-Variablen. Sie können es sich als den Hydratisierungsteil
  der 00-init und alles andere vorstellen, dank Ruby/Python-Bibliotheken zur Verwaltung
  von .env*-Dateien. Ich habe mich auch bemüht, diese Datei mit Pulumi sofort einsatzbereit
  zu machen (indem ich die Standard-ENV-Namen von Pulumi übernommen habe) und sie
  so kompatibel wie möglich mit Google Cloud Codelabs zu gestalten.\n\n* `proceed_if_error_matches`:
  Dies ist das einfachste und intelligenteste Skript, das ich je geschrieben habe.
  Es verwandelt sequentielle Bash-Skripte mit `set -euo pipefail` in Bash-Terraform-ähnliche
  Skripte. Stellen Sie sich vor, Sie müssen: (1) einen Bucket erstellen (2) eine ACL
  darauf setzen (3) Dateien darauf hochladen. Es ist naheliegend, dass Sie drei sequentielle
  Skripte haben, die von Zeit zu Zeit fehlschlagen können, und es dauert seine Zeit,
  bis Sie jede Zeile korrigiert haben. Wenn Sie damit fertig sind, möchten Sie mit
  der nächsten Zeile fortfahren, aber was passiert dann? Sie können nicht an (2) arbeiten,
  weil (1) mit einer lästigen Meldung wie \"Bucket existiert bereits\" fehlschlägt.
  Also dachte ich mir - was wäre, wenn ich NUR bestimmte Fehlermeldungen filtern könnte,
  die ich als Strings erfasse? Das ist der Grund für diese Datei.\n\n* `codelabba.rb`
  (proprietär) Dies ist ein Ruby-Skript, das ich noch nie öffentlich gemacht habe.
  Aber fragen Sie mich in den Kommentaren, und ich nehme mir vielleicht etwas Zeit,
  es zu bereinigen und als Open Source zu veröffentlichen. Es erstellt im Grunde ein
  Skelett für meine Codelabs, und ich habe es beim zweiten oder dritten Mal erfunden,
  als ich ein Qwiklab-Codelab gemacht habe, genau aus den Gründen, die ich oben geschrieben
  habe.\n\n* `XX-blah-blah.sh` ([Beispiel](https://github.com/palladius/20240809-qwiklab-rails-on-gcp))
  Dies sind Skripte, die in der Reihenfolge 01, 02, 03, ... ausgeführt werden sollen,
  so dass sie eine Geschichte erzählen. Stellen Sie es sich wie ein \"Bash Python
  Notebook\" vor. Ich weiß, das ist der tiefsinnigste Satz, den Sie heute lesen werden
  :)\n\nCode: https://github.com/palladius/20240809-qwiklab-rails-on-gcp\n\n## Fazit\n\nDas
  ist ein großes Experiment für mich! War es eine gute Idee? Eine schreckliche Idee?
  Lassen Sie es mich in den Kommentaren wissen!\n"
model: gemini-1.5-pro
code_version: '1.2'
article_hash: 3dc88c2143973ec8dad3a58b0ed4b82c2c2d1448a85358201ac5163e1f7927fe
title: "\"Level Up Your Rails Game with Cloud Run"
lang: de
...

---
input: "---\n# type: docs\ntitle: \"My Mac’s battery\U0001F50B on Google Cloud Monitoring
  — send SMS if low \U0001FAAB\"\ndate: 2022-11-09T11:48:51+01:00\nfeatured: false\ndraft:
  false\ncomment: true\ntoc: true\nreward: true\npinned: false\ncarousel: false\nseries:\ncategories:
  [ GCP, Work ]\n#tags: [GCP, macbook, SMS, pager, medium, symlink ]\ntags: [GCP,
  macbook, SMS, pager, medium, geminocks ]\nimages:\n- /images/articles/london-airport.jpg\nmeta_image:
  featured-sample.jpg # This is for ZZO\n#- /images/battery-life-cli.webp\n#- /images/london-airport.jpg\n#
  original TODO more from https://medium.com/google-cloud/my-macs-battery-on-google-cloud-monitoring-with-sms-if-its-low-a1ccd70485fe\n---\n\n<!--
  this works: ![Image Caption](/images/riccardo.jpg \"Use Image Title as Caption aeroporto\")
  -->\n![Image Caption](/images/articles/london-airport.jpg \"[HUGO] Taking a train
  to City Airport, my fav airport in London\")\n\n\nThis article shows how you can
  easily inject a generic key/value into Google Cloud Monitoring and set up alerts
  on it. I use it to alert on disk space, and now also low battery!\n\nThis morning
  I was in London, and I forgot my charger at home. With plenty of time but \U0001FAAB
  little battery, I thought: hey! I need to have a way to predict when my battery
  is low! And I need to do it in a totally overkill way!\n\n<!--more-->\n\nMy battery
  was at 42%, which seemed a subtle indication my idea was worth blogging. Googling
  around, I found an article which gave me the tip on how to script my Mac’s battery
  (note this only works for a Macbook).\n\nUgly code here (hey! I’m in an airport
  with no charger, do you want Unit tests too?!?)\n\n```ruby\n#!/usr/bin/env ruby\n\n#
  Note1. buridone is currently not used. It's for a more efficient use to extrapolate
  all info from a single file read.\n# Note2. This does NOT work on M1. I've just
  fixed this in the github repo sakura. Find the updated 0.2 code there.\ndef processMacCapacity(buridone)\n
  \ ret = {}\n  ret[:debug] = 'Will fill numerator and denominator until I nail it.'\n
  \ ret[:capacity_pct] = 142 # clearlly wrong\n  # `ioreg -l -w0 | grep AppleRawMaxCapacity`.split\n
  \ # => [\"|\", \"|\", \"\\\"AppleRawMaxCapacity\\\"\", \"=\", \"4320\"]\n  ret[:AppleRawMaxCapacity]
  = `ioreg -l -w0 | grep AppleRawMaxCapacity`.split[4].to_i\n  ret[:AppleRawCurrentCapacity]
  = `ioreg -l -w0 | grep AppleRawCurrentCapacity`.split[4].to_i\n  #  => [\"\\\"StateOfCharge\\\"=41\"]\n
  \ ret[:StateOfCharge] = `ioreg -l -w0 | grep BatteryData`.split(',').select{|e|
  e.match /StateOfCharge/ }[0].split('=')[1].to_i\n  ret[:AppleDesignCapacity] = `ioreg
  -l -w0 | grep BatteryData`.split(',').select{|e| e.match /DesignCapacity/ }[0].split('=')[1].to_i\n\n
  \ # derived values..\n  # this should be your battery life i guess?x\n  ret[:BatteryCapacityPercent]
  = ret[:AppleRawCurrentCapacity]*100.0/ret[:AppleRawMaxCapacity]\n  ret[:battery_health]
  =  ret[:AppleRawMaxCapacity]*100.0/ret[:AppleDesignCapacity]\n\n  return ret\nend\n\ndef
  real_program\n  capacity_hash = processMacCapacity(`ioreg -l -w0 | grep Capacity`)\n
  \ deb \"capacity_hash: '''#{white capacity_hash}'''\"\n  if $DEBUG\n    capacity_hash.each{|k,v|\n
  \     puts \"[DEB] #{k}:\\t#{v}\"\n  }\n  end\n  puts \"1. \U0001F50B BatteryLife
  % \U0001F50C\U0001FAAB: #{capacity_hash[:BatteryCapacityPercent].round(2)}\"\n  puts
  \"2. \U0001F50B BatteryHealth % \U0001F6DF: #{capacity_hash[:battery_health].round(2)}\"\nend\n\ndef
  main(filename)\n  deb \"I'm called by #{white filename}\"\n  init        # Enable
  this to have command line parsing capabilities!\n  real_program\nend\n\nmain(__FILE__)\n```\n\n\nI
  know, I call the same command 10 times and I could cache it. This is for the next
  iteration!\n\nThe best part of this is, not only I get my battery life, it also
  gives me my battery durability — so when I need to change battery. Woohoo!\n\nThere
  you go, let’s try it out, let me just remove the cable so you dont get a boring
  100%.\n\n![Image Caption](/images/articles/battery-life-cli.webp \"Here is my Battery
  Life and my Battery health\")\n\nTODO(ricc): finish\n\n\n[See article on Medium](https://medium.com/google-cloud/my-macs-battery-on-google-cloud-monitoring-with-sms-if-its-low-a1ccd70485fe)\n"
output: "---\n# type: docs\ntitle: \"\U0001F1EB\U0001F1F7 ♊ [Geminocks] La batterie\U0001F50B
  de mon Mac sur Google Cloud Monitoring — envoi de SMS si elle est faible \U0001FAAB\"\ndate:
  2022-11-09T11:48:51+01:00\nfeatured: false\ndraft: false\ncomment: true\ntoc: true\nreward:
  true\npinned: false\ncarousel: false\nseries:\ncategories: [ GCP, Work ]\ntags:
  [GCP, macbook, SMS, pager, medium, geminocks, French ]\nimages:\n- /images/articles/london-airport.jpg\nmeta_image:
  featured-sample.jpg # This is for ZZO\n#- /images/battery-life-cli.webp\n#- /images/london-airport.jpg\n#
  original TODO more from https://medium.com/google-cloud/my-macs-battery-on-google-cloud-monitoring-with-sms-if-its-low-a1ccd70485fe\n---\n\n<!--
  this works: ![Image Caption](/images/riccardo.jpg \"Use Image Title as Caption aeroporto\")
  -->\n![Image Caption](/images/articles/london-airport.jpg \"[HUGO] Prendre un train
  pour City Airport, mon aéroport préféré à Londres\")\n\n\nCet article montre comment
  vous pouvez facilement injecter une clé/valeur générique dans Google Cloud Monitoring
  et configurer des alertes dessus. Je l'utilise pour alerter sur l'espace disque,
  et maintenant aussi sur la batterie faible !\n\nCe matin, j'étais à Londres et j'ai
  oublié mon chargeur à la maison. Avec beaucoup de temps mais \U0001FAAB peu de batterie,
  j'ai pensé : hé ! J'ai besoin d'un moyen de prévoir quand ma batterie est faible
  ! Et j'ai besoin de le faire d'une manière totalement exagérée !\n\n<!--more-->\n\nMa
  batterie était à 42%, ce qui semblait être une indication subtile que mon idée valait
  la peine d'être publiée. En cherchant sur Google, j'ai trouvé un article qui m'a
  donné l'astuce pour scripter la batterie de mon Mac (notez que cela ne fonctionne
  que pour un Macbook).\n\nCode moche ici (hé ! Je suis dans un aéroport sans chargeur,
  vous voulez des tests unitaires aussi ? ! ?)\n\n```ruby\n#!/usr/bin/env ruby\n\n#
  Note1. buridone n'est actuellement pas utilisé. C'est pour une utilisation plus
  efficace afin d'extrapoler toutes les informations à partir d'une seule lecture
  de fichier.\n# Note2. Cela ne fonctionne PAS sur M1. Je viens de corriger cela dans
  le référentiel github sakura. Trouvez le code 0.2 mis à jour là-bas.\ndef processMacCapacity(buridone)\n
  \ ret = {}\n  ret[:debug] = 'Remplira le numérateur et le dénominateur jusqu'à ce
  que je le cloue.'\n  ret[:capacity_pct] = 142 # clairement faux\n  # `ioreg -l -w0
  | grep AppleRawMaxCapacity`.split\n  # => [\"|\", \"|\", \"\\\"AppleRawMaxCapacity\\\"\",
  \"=\", \"4320\"]\n  ret[:AppleRawMaxCapacity] = `ioreg -l -w0 | grep AppleRawMaxCapacity`.split[4].to_i\n
  \ ret[:AppleRawCurrentCapacity] = `ioreg -l -w0 | grep AppleRawCurrentCapacity`.split[4].to_i\n
  \ #  => [\"\\\"StateOfCharge\\\"=41\"]\n  ret[:StateOfCharge] = `ioreg -l -w0 |
  grep BatteryData`.split(',').select{|e| e.match /StateOfCharge/ }[0].split('=')[1].to_i\n
  \ ret[:AppleDesignCapacity] = `ioreg -l -w0 | grep BatteryData`.split(',').select{|e|
  e.match /DesignCapacity/ }[0].split('=')[1].to_i\n\n  # valeurs dérivées..\n  #
  cela devrait être la durée de vie de votre batterie, je suppose ?x\n  ret[:BatteryCapacityPercent]
  = ret[:AppleRawCurrentCapacity]*100.0/ret[:AppleRawMaxCapacity]\n  ret[:battery_health]
  =  ret[:AppleRawMaxCapacity]*100.0/ret[:AppleDesignCapacity]\n\n  return ret\nend\n\ndef
  real_program\n  capacity_hash = processMacCapacity(`ioreg -l -w0 | grep Capacity`)\n
  \ deb \"capacity_hash: '''#{white capacity_hash}'''\"\n  if $DEBUG\n    capacity_hash.each{|k,v|\n
  \     puts \"[DEB] #{k}:\\t#{v}\"\n  }\n  end\n  puts \"1. \U0001F50B Autonomie
  de la batterie % \U0001F50C\U0001FAAB: #{capacity_hash[:BatteryCapacityPercent].round(2)}\"\n
  \ puts \"2. \U0001F50B Santé de la batterie % \U0001F6DF: #{capacity_hash[:battery_health].round(2)}\"\nend\n\ndef
  main(filename)\n  deb \"Je suis appelé par #{white filename}\"\n  init        #
  Activez ceci pour avoir des capacités d'analyse de ligne de commande !\n  real_program\nend\n\nmain(__FILE__)\n```\n\n\nJe
  sais, j'appelle la même commande 10 fois et je pourrais la mettre en cache. C'est
  pour la prochaine itération !\n\nLe meilleur dans tout ça, c'est que non seulement
  j'obtiens l'autonomie de ma batterie, mais cela me donne également sa durabilité
  - donc quand j'ai besoin de changer de batterie. Youpi !\n\nVoilà, essayons, laissez-moi
  juste retirer le câble pour que vous n'obteniez pas un 100% ennuyeux.\n\n![Image
  Caption](/images/articles/battery-life-cli.webp \"Voici l'autonomie de ma batterie
  et la santé de ma batterie\")\n\nTODO(ricc): terminer\n\n\n[Voir l'article sur Medium](https://medium.com/google-cloud/my-macs-battery-on-google-cloud-monitoring-with-sms-if-its-low-a1ccd70485fe)\n"
model: gemini-1.5-pro
code_version: '1.1'

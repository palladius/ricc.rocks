---
input: |+
  ---
  title: "♊ [Geminocks] Level Up Your Rails Game with Cloud Run: A Qwiklabs Deep Dive"
  date: 2024-10-19  # Today's date
  layout: single  # Assuming single.html for blog posts in ZZO theme
  # Optional fields (change as needed)
  author: Riccardo Carlesso
  read_time: 3  # Minutes
  # categories: Add categories if applicable (e.g., ruby, rails, gcp)
  # tags: Add tags if applicable (e.g., qwiklabs, cloudrun)
  Tags: [qwiklabs, cloudrun, rubyonrails, devops, gcp, googlecloud, toolchain]
  canonicalURL: https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b
  ---
  ([Original article on Medium](https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b))

  Are you familiar with Cloud Skills Boost (formerly known as Qwiklabs)?

  In this video, I walk you through me executing the steps described in Ruby on Rails with PostgreSQL on Cloud Run on cloudskillsboost website, encountering a few bumps along the road, and fixing them.

  Plus, I’m going to demonstrate my particular and personal ToolChain, as a former bash/perl dev, so it might look peculiar to you.

  If you’re eager to start, here are my final Code on GitHub [link to code](https://github.com/palladius/20240809-qwiklab-rails-on-gcp) and the RoR Codelab [link to codelab](https://www.cloudskillsboost.google/focuses/20047).

  Here’s my Rails video!

  ## **About Skillsboost**

  Skillsboost (formerly known as Qwiklabs) is a way to train yourself to Google Cloud by executing “labs”. These labs are time constrained, Google creates all the resouerces for you, and deletes them at the end of the lab.

  To do the labs, you have a credits-based system. You can pay $$ to get them, or you can get some for free by just subscribing to our Innovator Champion program (yup, all free!). This should allow you to do ~10 labs for free, also with Gemini (I’ve tried them, they’re a lot of fun!).

  Our Codelab is here: https://www.cloudskillsboost.google/focuses/20047

  ## **Riccardo’s approach to Skillsboost**

  There are a number of ways to execute a Lab, but I see mostly two:

  1. You execute code in the Cloud. This is the simplest, what everybody does. You use a combination of Cloud Shell and Cloud Editor (if vim doesn’t cut it).
  2. You execute code locally. This is a bit harder to set up, but then you get to keep all your useful code locally for future use/hacking. I’ve spent a few years writing a toolchain for this, using codelabba and proceed_if_error_matches and others. As you can imagine, I believe I’m the only earthling to persist my codelab scripts somewhere locally. Am I in good company? Please connect with me and tell me what you do differently!

  As you can see in my video, I do both to show you both approaches, and good and bads.

  ## **What’s a friction log?**

  A Friction Log is a Google Doc where you describe in text your experience, your emotions, and even your level of anger (using color codes) to the developer of some code/resources. The idea is to then share your doc with the implementor, tracking code and doc bugs in it. My crazy idea is to make a video out of it!

  ## **My “codelabba” ToolChain**

  The time has come to explain my personal toolchain. Usually I have a number of git repos under `~/git/`, one of them being Open Source. Of course I’m talking about palladius/sakura.

  * `00-init.sh`: The initialization script, common to all my codelabba projects, it refers to ENV variables like PROJECT_ID, REGION and so on.

  * `.envrc`: This is powered by `direnv`, tool suggested to me by Rob Edwards and it contains all my ENV vars. You can think of it as the hydration part of the 00-init and everything else, thanks to Ruby/Python libraries to manage .env* files. I’ve also made an effort to make this file work out of the box with Pulumi (adopting Pulumi standard ENV names) and to be as compatible as possible with Google Cloud codelabs.

  * `proceed_if_error_matches`: This is the simplest smartest script I’ve ever written. It transforms sequential bash scripts with `set -euo pipefail` into bash terraform-looking scripts. Imagine you need to: (1) create a bucket (2) set an ACL on it (3) upload files onto it. It’s reasonable to think you have three sequential scripts, which might fail from time to time and it takes time for you to fix each line. Once you do you want to proceed to the next, but guess what? you cant work on (2) because (1) will start failing with something annoying like “bucket already exists”. So I thought — what if I could filter ONLY certain error messages, which I capture as strings? Here’s the reason for this file.

  * `codelabba.rb` (proprietary) This is a ruby script which I’ve never released publicly. But ask me in the comments, and I might take some time to clean it up and open source it. It basically creates a skeleton for my codelabs, and I invented it the 2nd or 3rd time I was doing a Qwiklab codelab, exactly for the reasons i’ve written above.

  * `XX-blah-blah.sh` ([example](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)) These are scripts to be executed in order: 01, 02, 03, … so they tell you a story. Think of it as a “Bash python notebook”. I know, this is the most profound sentence you’re gonna read today :)

  Code: https://github.com/palladius/20240809-qwiklab-rails-on-gcp

  ## Conclusions

  This is a big experiment for me! Was it a good idea? A terrible idea? Let me know in the comments!


output: "---\ntitle: \"\U0001F1EE\U0001F1F9 ♊ [Geminocks] Migliora il tuo gioco Rails
  con Cloud Run: un'immersione profonda in Qwiklabs\"\ndate: 2024-10-19  # Today's
  date\nlayout: single  # Assuming single.html for blog posts in ZZO theme\n# Optional
  fields (change as needed)\nauthor: Riccardo Carlesso\nread_time: 3  # Minutes\n#
  categories: Add categories if applicable (e.g., ruby, rails, gcp)\n# tags: Add tags
  if applicable (e.g., qwiklabs, cloudrun)\nTags: [qwiklabs, cloudrun, rubyonrails,
  devops, gcp, googlecloud, toolchain]\ncanonicalURL: https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b\n---\n([Articolo
  originale su Medium](https://medium.com/@palladiusbonton/ruby-on-rails-with-postgresql-on-cloud-run-bdaaf0b26e0b))\n\nConosci
  Cloud Skills Boost (precedentemente noto come Qwiklabs)?\n\nIn questo video, ti
  mostro come eseguo i passaggi descritti in Ruby on Rails con PostgreSQL su Cloud
  Run sul sito Web di cloudskillsboost, incontrando alcuni ostacoli lungo il percorso
  e risolvendoli.\n\nInoltre, mostrerò la mia particolare e personale ToolChain, da
  ex sviluppatore bash/perl, quindi potrebbe sembrarti peculiare.\n\nSe sei ansioso
  di iniziare, ecco il mio codice finale su GitHub [link al codice](https://github.com/palladius/20240809-qwiklab-rails-on-gcp)
  e il Codelab di RoR [link al codelab](https://www.cloudskillsboost.google/focuses/20047).\n\nEcco
  il mio video su Rails!\n\n## **Informazioni su Skillsboost**\n\nSkillsboost (precedentemente
  noto come Qwiklabs) è un modo per esercitarti su Google Cloud eseguendo \"laboratori\".
  Questi laboratori hanno un tempo limitato, Google crea tutte le risorse per te e
  le elimina al termine del laboratorio.\n\nPer svolgere i laboratori, hai un sistema
  basato su crediti. Puoi pagare $$ per ottenerli oppure puoi ottenerne alcuni gratuitamente
  semplicemente iscrivendoti al nostro programma Innovator Champion (sì, tutto gratis!).
  Questo dovrebbe consentirti di eseguire gratuitamente circa 10 laboratori, anche
  con Gemini (li ho provati, sono molto divertenti!).\n\nIl nostro Codelab è qui:
  https://www.cloudskillsboost.google/focuses/20047\n\n## **L'approccio di Riccardo
  a Skillsboost**\n\nEsistono diversi modi per eseguire un laboratorio, ma ne vedo
  principalmente due:\n\n1. Esegui il codice nel cloud. Questo è il più semplice,
  quello che fanno tutti. Utilizzi una combinazione di Cloud Shell e Cloud Editor
  (se vim non è sufficiente).\n2. Esegui il codice localmente. Questo è un po' più
  difficile da configurare, ma poi puoi conservare tutto il tuo codice utile localmente
  per un utilizzo/hacking futuro. Ho trascorso alcuni anni a scrivere una toolchain
  per questo, usando codelabba e proceed_if_error_matches e altri. Come puoi immaginare,
  credo di essere l'unico terrestre a conservare i miei script codelab da qualche
  parte localmente. Sono in buona compagnia? Per favore, contattami e dimmi cosa fai
  diversamente!\n\nCome puoi vedere nel mio video, faccio entrambe le cose per mostrarti
  entrambi gli approcci, con i loro pro e contro.\n\n## **Cos'è un registro delle
  frizioni?**\n\nUn registro delle frizioni è un documento Google in cui descrivi
  a parole la tua esperienza, le tue emozioni e persino il tuo livello di rabbia (utilizzando
  codici colore) allo sviluppatore di codice/risorse. L'idea è quindi quella di condividere
  il tuo documento con l'implementatore, monitorando i bug del codice e del documento
  al suo interno. La mia folle idea è farne un video!\n\n## **La mia ToolChain \"codelabba\"**\n\nÈ
  giunto il momento di spiegare la mia toolchain personale. Di solito ho diversi repository
  git in `~/git/`, uno dei quali è Open Source. Ovviamente sto parlando di palladius/sakura.\n\n*
  `00-init.sh`: lo script di inizializzazione, comune a tutti i miei progetti codelabba,
  fa riferimento a variabili ENV come PROJECT_ID, REGION e così via.\n\n* `.envrc`:
  questo è alimentato da `direnv`, strumento che mi è stato suggerito da Rob Edwards
  e contiene tutte le mie variabili ENV. Puoi pensarlo come la parte di idratazione
  di 00-init e di tutto il resto, grazie alle librerie Ruby/Python per gestire i file
  .env*. Mi sono anche sforzato di far funzionare questo file immediatamente con Pulumi
  (adottando i nomi ENV standard di Pulumi) e di essere il più compatibile possibile
  con i codelab di Google Cloud.\n\n* `proceed_if_error_matches`: questo è lo script
  più semplice e intelligente che abbia mai scritto. Trasforma script bash sequenziali
  con `set -euo pipefail` in script bash simili a terraform. Immagina di dover: (1)
  creare un bucket (2) impostare un ACL su di esso (3) caricare file su di esso. È
  ragionevole pensare di avere tre script sequenziali, che potrebbero fallire di volta
  in volta e ci vuole tempo per correggere ogni riga. Una volta fatto vuoi passare
  al successivo, ma indovina un po'? non puoi lavorare su (2) perché (1) inizierà
  a fallire con qualcosa di fastidioso come \"il bucket esiste già\". Quindi ho pensato:
  e se potessi filtrare SOLO determinati messaggi di errore, che catturo come stringhe?
  Ecco il motivo di questo file.\n\n* `codelabba.rb` (proprietario) Questo è uno script
  ruby che non ho mai rilasciato pubblicamente. Ma chiedimelo nei commenti e potrei
  dedicare un po' di tempo a ripulirlo e renderlo open source. Fondamentalmente crea
  uno scheletro per i miei codelab e l'ho inventato la seconda o terza volta che stavo
  realizzando un codelab Qwiklab, esattamente per i motivi che ho scritto sopra.\n\n*
  `XX-blah-blah.sh` ([esempio](https://github.com/palladius/20240809-qwiklab-rails-on-gcp))
  Questi sono script da eseguire in ordine: 01, 02, 03, … quindi ti raccontano una
  storia. Pensala come un \"notebook Python Bash\". Lo so, questa è la frase più profonda
  che leggerai oggi :)\n\nCodice: https://github.com/palladius/20240809-qwiklab-rails-on-gcp\n\n##
  Conclusioni\n\nQuesto è un grande esperimento per me! È stata una buona idea? Una
  pessima idea? Fammelo sapere nei commenti!\n"
model: gemini-1.5-pro
code_version: '1.0'
...

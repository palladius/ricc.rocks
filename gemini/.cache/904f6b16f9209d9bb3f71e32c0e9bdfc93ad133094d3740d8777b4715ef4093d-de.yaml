---
input: "---\n# type: docs\ntitle: \"My Mac’s battery\U0001F50B on Google Cloud Monitoring
  — send SMS if low \U0001FAAB\"\ndate: 2022-11-09T11:48:51+01:00\nfeatured: false\ndraft:
  false\ncomment: true\ntoc: true\nreward: true\npinned: false\ncarousel: false\nseries:\ncategories:
  [ GCP, Work ]\n#tags: [GCP, macbook, SMS, pager, medium, symlink ]\ntags: [GCP,
  macbook, SMS, pager, medium, geminocks ]\nimages:\n- /images/articles/london-airport.jpg\nmeta_image:
  featured-sample.jpg # This is for ZZO\n#- /images/battery-life-cli.webp\n#- /images/london-airport.jpg\n#
  original TODO more from https://medium.com/google-cloud/my-macs-battery-on-google-cloud-monitoring-with-sms-if-its-low-a1ccd70485fe\n---\n\n<!--
  this works: ![Image Caption](/images/riccardo.jpg \"Use Image Title as Caption aeroporto\")
  -->\n![Image Caption](/images/articles/london-airport.jpg \"[HUGO] Taking a train
  to City Airport, my fav airport in London\")\n\n\nThis article shows how you can
  easily inject a generic key/value into Google Cloud Monitoring and set up alerts
  on it. I use it to alert on disk space, and now also low battery!\n\nThis morning
  I was in London, and I forgot my charger at home. With plenty of time but \U0001FAAB
  little battery, I thought: hey! I need to have a way to predict when my battery
  is low! And I need to do it in a totally overkill way!\n\n<!--more-->\n\nMy battery
  was at 42%, which seemed a subtle indication my idea was worth blogging. Googling
  around, I found an article which gave me the tip on how to script my Mac’s battery
  (note this only works for a Macbook).\n\nUgly code here (hey! I’m in an airport
  with no charger, do you want Unit tests too?!?)\n\n```ruby\n#!/usr/bin/env ruby\n\n#
  Note1. buridone is currently not used. It's for a more efficient use to extrapolate
  all info from a single file read.\n# Note2. This does NOT work on M1. I've just
  fixed this in the github repo sakura. Find the updated 0.2 code there.\ndef processMacCapacity(buridone)\n
  \ ret = {}\n  ret[:debug] = 'Will fill numerator and denominator until I nail it.'\n
  \ ret[:capacity_pct] = 142 # clearlly wrong\n  # `ioreg -l -w0 | grep AppleRawMaxCapacity`.split\n
  \ # => [\"|\", \"|\", \"\\\"AppleRawMaxCapacity\\\"\", \"=\", \"4320\"]\n  ret[:AppleRawMaxCapacity]
  = `ioreg -l -w0 | grep AppleRawMaxCapacity`.split[4].to_i\n  ret[:AppleRawCurrentCapacity]
  = `ioreg -l -w0 | grep AppleRawCurrentCapacity`.split[4].to_i\n  #  => [\"\\\"StateOfCharge\\\"=41\"]\n
  \ ret[:StateOfCharge] = `ioreg -l -w0 | grep BatteryData`.split(',').select{|e|
  e.match /StateOfCharge/ }[0].split('=')[1].to_i\n  ret[:AppleDesignCapacity] = `ioreg
  -l -w0 | grep BatteryData`.split(',').select{|e| e.match /DesignCapacity/ }[0].split('=')[1].to_i\n\n
  \ # derived values..\n  # this should be your battery life i guess?x\n  ret[:BatteryCapacityPercent]
  = ret[:AppleRawCurrentCapacity]*100.0/ret[:AppleRawMaxCapacity]\n  ret[:battery_health]
  =  ret[:AppleRawMaxCapacity]*100.0/ret[:AppleDesignCapacity]\n\n  return ret\nend\n\ndef
  real_program\n  capacity_hash = processMacCapacity(`ioreg -l -w0 | grep Capacity`)\n
  \ deb \"capacity_hash: '''#{white capacity_hash}'''\"\n  if $DEBUG\n    capacity_hash.each{|k,v|\n
  \     puts \"[DEB] #{k}:\\t#{v}\"\n  }\n  end\n  puts \"1. \U0001F50B BatteryLife
  % \U0001F50C\U0001FAAB: #{capacity_hash[:BatteryCapacityPercent].round(2)}\"\n  puts
  \"2. \U0001F50B BatteryHealth % \U0001F6DF: #{capacity_hash[:battery_health].round(2)}\"\nend\n\ndef
  main(filename)\n  deb \"I'm called by #{white filename}\"\n  init        # Enable
  this to have command line parsing capabilities!\n  real_program\nend\n\nmain(__FILE__)\n```\n\n\nI
  know, I call the same command 10 times and I could cache it. This is for the next
  iteration!\n\nThe best part of this is, not only I get my battery life, it also
  gives me my battery durability — so when I need to change battery. Woohoo!\n\nThere
  you go, let’s try it out, let me just remove the cable so you dont get a boring
  100%.\n\n![Image Caption](/images/articles/battery-life-cli.webp \"Here is my Battery
  Life and my Battery health\")\n\nTODO(ricc): finish\n\n\n[See article on Medium](https://medium.com/google-cloud/my-macs-battery-on-google-cloud-monitoring-with-sms-if-its-low-a1ccd70485fe)\n"
output: "---\n# type: docs\ntitle: \"\U0001F1E9\U0001F1EA ♊ [Geminocks] Der Akku meines
  Macs\U0001F50B in Google Cloud Monitoring — SMS senden, wenn er niedrig ist \U0001FAAB\"\ndate:
  2022-11-09T11:48:51+01:00\nfeatured: false\ndraft: false\ncomment: true\ntoc: true\nreward:
  true\npinned: false\ncarousel: false\nseries:\ncategories: [ GCP, Work ]\ntags:
  [GCP, macbook, SMS, pager, medium, geminocks, German ]\nimages:\n- /images/articles/london-airport.jpg\nmeta_image:
  featured-sample.jpg # This is for ZZO\n#- /images/battery-life-cli.webp\n#- /images/london-airport.jpg\n#
  original TODO more from https://medium.com/google-cloud/my-macs-battery-on-google-cloud-monitoring-with-sms-if-its-low-a1ccd70485fe\n---\n\n<!--
  this works: ![Image Caption](/images/riccardo.jpg \"Use Image Title as Caption aeroporto\")
  -->\n![Image Caption](/images/articles/london-airport.jpg \"[HUGO] Ich nehme den
  Zug zum City Airport, meinem Lieblingsflughafen in London\")\n\n\nDieser Artikel
  zeigt, wie Sie auf einfache Weise einen generischen Schlüssel/Wert in Google Cloud
  Monitoring einfügen und darauf basierend Warnungen einrichten können. Ich verwende
  dies, um Warnungen bei geringem Festplattenspeicherplatz und jetzt auch bei niedrigem
  Akkustand zu erhalten!\n\nHeute Morgen war ich in London und habe mein Ladegerät
  zu Hause vergessen. Ich hatte zwar noch viel Zeit, aber \U0001FAAB wenig Akku, und
  dachte mir: Hey! Ich brauche eine Möglichkeit, vorherzusehen, wann mein Akku leer
  ist! Und ich muss das auf eine total übertriebene Weise tun!\n\n<!--more-->\n\nMein
  Akku war bei 42 %, was mir wie ein subtiles Zeichen dafür vorkam, dass meine Idee
  es wert war, darüber zu bloggen. Bei der Google-Suche stieß ich auf einen Artikel,
  der mir den Tipp gab, wie ich den Akku meines Macs per Skript abfragen kann (beachten
  Sie, dass dies nur bei einem Macbook funktioniert).\n\nHässlicher Code hier (hey!
  Ich bin in einem Flughafen ohne Ladegerät, wollen Sie auch noch Unit-Tests?!?):\n\n```ruby\n#!/usr/bin/env
  ruby\n\n# Anmerkung 1: buridone wird derzeit nicht verwendet. Es ist für eine effizientere
  Nutzung gedacht, um alle Informationen aus einem einzigen Dateilesevorgang zu extrapolieren.\n#
  Anmerkung 2: Dies funktioniert NICHT auf M1. Ich habe das gerade im Github-Repo
  sakura behoben. Den aktualisierten 0.2-Code finden Sie dort.\ndef processMacCapacity(buridone)\n
  \ ret = {}\n  ret[:debug] = 'Ich werde Zähler und Nenner füllen, bis ich es richtig
  hinbekomme.'\n  ret[:capacity_pct] = 142 # eindeutig falsch\n  # `ioreg -l -w0 |
  grep AppleRawMaxCapacity`.split\n  # => [\"|\", \"|\", \"\\\"AppleRawMaxCapacity\\\"\",
  \"=\", \"4320\"]\n  ret[:AppleRawMaxCapacity] = `ioreg -l -w0 | grep AppleRawMaxCapacity`.split[4].to_i\n
  \ ret[:AppleRawCurrentCapacity] = `ioreg -l -w0 | grep AppleRawCurrentCapacity`.split[4].to_i\n
  \ #  => [\"\\\"StateOfCharge\\\"=41\"]\n  ret[:StateOfCharge] = `ioreg -l -w0 |
  grep BatteryData`.split(',').select{|e| e.match /StateOfCharge/ }[0].split('=')[1].to_i\n
  \ ret[:AppleDesignCapacity] = `ioreg -l -w0 | grep BatteryData`.split(',').select{|e|
  e.match /DesignCapacity/ }[0].split('=')[1].to_i\n\n  # abgeleitete Werte..\n  #
  das sollte Ihre Akkulaufzeit sein, schätze ich?x\n  ret[:BatteryCapacityPercent]
  = ret[:AppleRawCurrentCapacity]*100.0/ret[:AppleRawMaxCapacity]\n  ret[:battery_health]
  =  ret[:AppleRawMaxCapacity]*100.0/ret[:AppleDesignCapacity]\n\n  return ret\nend\n\ndef
  real_program\n  capacity_hash = processMacCapacity(`ioreg -l -w0 | grep Capacity`)\n
  \ deb \"capacity_hash: '''#{white capacity_hash}'''\"\n  if $DEBUG\n    capacity_hash.each{|k,v|\n
  \     puts \"[DEB] #{k}:\\t#{v}\"\n  }\n  end\n  puts \"1. \U0001F50B Akkulaufzeit
  % \U0001F50C\U0001FAAB: #{capacity_hash[:BatteryCapacityPercent].round(2)}\"\n  puts
  \"2. \U0001F50B Akkuzustand % \U0001F6DF: #{capacity_hash[:battery_health].round(2)}\"\nend\n\ndef
  main(filename)\n  deb \"Ich werde aufgerufen von #{white filename}\"\n  init        #
  Aktivieren Sie dies, um Befehlszeilen-Parsing-Funktionen zu erhalten!\n  real_program\nend\n\nmain(__FILE__)\n```\n\n\nIch
  weiß, ich rufe den gleichen Befehl 10 Mal auf und könnte ihn zwischenspeichern.
  Das ist für die nächste Iteration!\n\nDas Beste daran ist, dass ich nicht nur meine
  Akkulaufzeit angezeigt bekomme, sondern auch die Haltbarkeit meines Akkus - also
  wann ich den Akku wechseln muss. Woohoo!\n\nLos geht's, probieren wir es aus, ich
  ziehe nur kurz das Kabel ab, damit Sie keine langweiligen 100 % angezeigt bekommen.\n\n![Image
  Caption](/images/articles/battery-life-cli.webp \"Hier sind meine Akkulaufzeit und
  mein Akkuzustand\")\n\nTODO(ricc): fertigstellen\n\n\n[Artikel auf Medium lesen](https://medium.com/google-cloud/my-macs-battery-on-google-cloud-monitoring-with-sms-if-its-low-a1ccd70485fe)\n"
model: gemini-1.5-pro
code_version: '1.1'
